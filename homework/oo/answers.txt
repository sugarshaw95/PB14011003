假设B,C都继承自A,而D多重继承自B,C.
重复继承在实现上会在D的对象布局中在B,C的副本中各保留一份A的副本,在存储时就是顺序存储.
而虚拟继承只会保留一份A的副本,实现上是利用虚指针和vtable等机制实现的.

使用方法上,虚拟继承只要在B,C类声明时加上virtual关键字,而多重继承不需要加什么特殊的关键字.
在使用场合上,还是要具体情况具体分析,如果程序中希望派生类有多个基类副本,就可以用重复继承,不过这样比较占空间.
多重继承还有一个问题就是容易产生二义性,例如在调用基类成员函数时会不知道是调用的哪个副本,这种问题可以通过用::指定,
或者使用虚函数(也是加virtual关键字,但只是对函数而言),虚函数的实现机制与虚拟继承类似.
如果我们程序中希望避免二义性,并想要节省空间,则建议使用虚拟继承.但由于虚拟继承实现机制的问题,每次调用额外增加了根据
虚指针和vtable查找的过程，故频繁调用时效率可能较低.

编写上述代码时,遇到的主要困难就是输出对应成员地址的问题,因为自己之前对C++不是那么熟悉,在网上查了一些资料,对数据成员
的地址还不成问题,但对于具体类实例的成员方法,没有找到太好的方法,试了多种方法都报错:ISO C++ forbids taking the address of a bound member function to form a pointer to member function.
所以就先只把类自身的方法地址输出了一下,不过似乎没有太大的意义...
但是只看数据成员的地址也应该能够说明多份副本和一份副本的问题了.别的话...也没有什么,不知道是不是我想得过于简单了.主要是
今天有点发烧,头很痛,实在写不下去了,以后想起来再补把...
