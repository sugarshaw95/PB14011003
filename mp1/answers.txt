					MP1.1
1.不同主要在于:
(1) C++ STL中的list是一个双向链表,其中每个节点都有前驱和后继指针.而cool的list是单向的,只能通过取tl的方式取后继
(2)对于元素的插入,cool的list只支持使用list的构造器实现插入,且只能把元素插入到list的头部(作为head)，而C++ STL的
list提供了多个成员函数以支持不同形式的插入操作,可以在list的头部插入,尾部插入,或者在特定的某个位置插入(使用push_front,
push_back，insert等函数).
(3)cool的list似乎不支持删除操作,而C++ STL的list支持多种模式的删除操作
(4)cool的list只提供了三个相关函数,实现了打印,计算len以及对整个list 应用一个function三种功能。而且这三个函数不是
list的成员函数.而C++ STL的list提供了非常多的相关函数以实现对List的各种操作，而且都是list的成员函数.除了插入和删除,
还有reverse,sort等多种操作,功能要比cool的list强大得多.


2.String table的意义主要在于:
(1)编译器所要处理的string中有很多都是重复使用的高频string,
对于这些string的存储，我们希望能够有效地节省空间，并且尽量把它们存放在一起，方便查找。
而不能每次遇到一个string都单独存储，这样极度浪费空间又不容易查找。而string table是用
list这样的数据结构实现的,刚好可以满足我们对于节省空间和存储紧凑，方便查找的要求。
(2)在编译时,code generator需要能够将string,intger和identifiers区别开来。而string table
在具体实现时恰好是采用了三个独立table,分别存储string constants(stringtable),integer 
constants(intable),identifiers(idtable)的结构。这样的结构使得对于这三种类型的string的区
分工作变得十分简单。

				MP1.3(第一次提交)
可能出现的冲突主要有两方面：
1.expr中的移进规约冲突,例如1+2*3这类,这些基本都是运算符优先级和结合性导致的冲突，而在cool manual里面有对于各种运算符优先级和结合性的说明,只要利用bison的特性声明这些运算符的优先级和结合性即可.

2.let表达式带来的二义性移进规约冲突:
例如形如let x:Int ->1 IN 1+2 这类的冲突,即IN后面的expr的范围问题,根据cool手册,这个expr应当尽量延伸.
根据flex和bison书中的内容,bison把规则(产生式)右部最右边记号的优先级赋给规则本身.　按照cool手册的要求.
let型expr的这条规则优先级应该是最低的,因此可以通过把IN的优先级设为最低来避免这种冲突,至于IN的结合性,事实上并不重要,因为并不会用到它的结合性,可以随便写,这里写的是left.


